// generated by jsonenums -type=LocationType; DO NOT EDIT

package domain

import (
	"encoding/json"
	"fmt"
)

var (
	_LocationTypeNameToValue = map[string]LocationType{
		"Country": Country,
		"State":   State,
		"City":    City,
	}

	_LocationTypeValueToName = map[LocationType]string{
		Country: "Country",
		State:   "State",
		City:    "City",
	}
)

func init() {
	var v LocationType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_LocationTypeNameToValue = map[string]LocationType{
			interface{}(Country).(fmt.Stringer).String(): Country,
			interface{}(State).(fmt.Stringer).String():   State,
			interface{}(City).(fmt.Stringer).String():    City,
		}
	}
}

// MarshalJSON is generated so LocationType satisfies json.Marshaler.
func (r LocationType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _LocationTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid LocationType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so LocationType satisfies json.Unmarshaler.
func (r *LocationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LocationType should be a string, got %s", data)
	}
	v, ok := _LocationTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid LocationType %q", s)
	}
	*r = v
	return nil
}
